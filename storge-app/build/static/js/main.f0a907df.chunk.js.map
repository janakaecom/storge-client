{"version":3,"sources":["components/useForm.js","components/helpers/Auth-Header.js","components/helpers/Service.js","components/signUp/signUpType.js","components/login/Captcha.js","components/login/SignUp.js","components/signUp/signUpAction.js","components/login/OTPVerification.js","components/login/PasswordEnteringScreen.js","components/signUp/signUpReducer.js","components/signUp/rootReducer.js","components/signUp/store.js","components/helpers/IsUserLogged.js","components/login/SignIn.js","components/Home.js","components/UnAuthorized.js","components/route/PrivateRoute.js","components/login/ResetPassword.js","components/login/ChangePassword.js","components/pages/Profile.js","components/pages/DefaultPage.js","components/student/Student.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","initialFieldValues","validate","useState","values","setValues","errors","setErrors","handleInputChange","e","target","name","value","fieldValue","clearData","authHeader","currentUser","service","Token","Authorization","baseUrl","sendPostRequest","obj","myUrl","axios","post","JSON","stringify","headers","sendGetRequest","get","params","logout","localStorage","removeItem","parse","getItem","SIGN_UP","Captcha","props","context","onLoadRecaptcha","bind","verifyCallback","state","isVerified","this","captchaDemo","console","log","reset","recaptchaToken","setState","verifiedCaptcha","ref","el","size","data-theme","render","sitekey","onloadCallback","Component","MobileNo","DOB","PIN","verified","connect","mobileNo","signup","dispatch","signupUser","type","payload","history","useHistory","error","setError","doHandleSubmit","setItem","action","then","response","signUpSuccess","result","data","Code","Msg","push","fieldValues","temp","Object","every","x","showValidateMsg","field","className","autoComplete","onSubmit","preventDefault","htmlFor","onChange","OTP","OTPVerification","isResentOTP","setResentOTP","submitOTPSuccess","submitOTPErrorHandling","code","message","isNaN","resendOTPSuccess","applicationId","otpNo","catch","onClick","Password","ConfirmPassword","PasswordEnteringScreen","setPasswordSuccess","setPasswordErrorHandling","ComparePasswordValidator","test","initialValues","signUpReducer","rootReducer","combineReducers","signupReducer","store","createStore","TOKEN_KEY","SignIn","signInSuccess","signInSuccessErrorHandling","Home","UnAuthorized","PrivateRoute","component","rest","permission","to","ResetPassword","ExistPassword","ChangePassword","Message","Profile","DefaultPage","selectedFile","toast","configure","initialHeaderValues","instituteId","category1Id","category2Id","category3Id","Id","IndexNo","FirstName","LastName","FullName","PermanentAddress","ResidenceAddress","Class","CallingName","Email","Telephone","ParentCategory1","ParentCategory1ContactNo","ParentCategory2","ParentCategory2ContactNo","ParentCategory3","ParentCategory3ContactNo","Student","inputEl","useRef","students","setStudents","student","setStudent","categories1","setCategories1","categories2","setCategories2","categories3","setCategories3","institutes","setInstitutes","headerValues","setInitialHeaderValues","category3Txt","setCategory3Txt","categoryErrors","setCategoryErrors","show","setShow","useEffect","getCategories","getInstitutes","validateCategory","valid","institute","category1","category2","category3","showCategoryValidateMsg","doConvertExcelToData","XLSX","utils","json_to_sheet","fileReader","FileReader","readAsBinaryString","onload","event","workbook","read","SheetNames","forEach","sheet","rowObject","sheet_to_row_object_array","Sheets","convertToOriginalObj","duplicateIndexes","findDuplicates","map","length","warning","join","current","studentArray","i","createGardianList","gardianArray","GardianTypeId","obj1","obj2","townId","getInstitutesSuccess","studentSaveFailure","town","institueId","getCategory1Success","handleOnChange","ev","getCategories2","getCategories3","index","nativeEvent","selectedIndex","text","getCategory2Success","getCategories3Success","studentSaveSuccess","success","creatObject","validation","InstituteId","Number","ResidentialAddress","EnrolledClassId","DisplayName","Gardians","arr","sorted_arr","slice","sort","results","undefined","warn","validationSchema","Yup","shape","trim","required","email","addClick","update","Modal","onHide","animation","Header","closeButton","Title","Body","enableReinitialize","findIndex","newStudents","status","touched","handleChange","setFieldValue","setFieldTouched","isSubmitting","resetForm","class","for","maxLength","as","disabled","v","InsName","Category1id","Category1Name","Category2id","Category2Name","Category3id","Category3Name","fileSaver","saveAs","id","accept","files","dataSource","columnAutoWidth","onToolbarPreparing","toolbarOptions","items","unshift","location","widget","options","icon","allowColumnReordering","showBorders","allowColumnResizing","enabled","fileName","visible","mode","defaultPageSize","allowDeleting","useIcons","dataField","cellRender","key","style","studentObj","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f0a907df.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst useForm = (initialFieldValues, validate) => \r\n{\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        const fieldValue = { [name]: value }\r\n        setValues({\r\n            ...values,\r\n            ...fieldValue\r\n        })\r\n        validate(fieldValue)\r\n    }\r\n    const clearData=()=>{\r\n        setValues(initialFieldValues);\r\n        setErrors({});\r\n    }\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        clearData,\r\n    };\r\n}\r\n\r\nexport default useForm;\r\n","import { service } from './Service';\r\n\r\nexport function authHeader() {\r\n    const currentUser = service.currentUser;\r\n    if (currentUser && currentUser.Token) {\r\n        return {  Authorization: `Bearer ${currentUser.Token}` }\r\n        // return { 'Content-Type': 'application/json' }\r\n    } else {\r\n        return { 'Content-Type': 'application/json' }\r\n    }\r\n}","import axios from \"axios\";\r\nimport { authHeader } from \"./Auth-Header\";\r\n// const baseUrl = \"https://localhost:44369/api/\"\r\nconst baseUrl = \"http://testsorageweb.somee.com/api/\"\r\n\r\n\r\nexport const service = {\r\n    sendPostRequest,\r\n    sendGetRequest,\r\n    logout,\r\n    get currentUser() { return JSON.parse(localStorage.getItem('currentUser')); }\r\n};\r\n\r\n\r\n\r\nfunction sendPostRequest(obj, myUrl) {\r\n    return axios.post(baseUrl + myUrl,JSON.stringify(obj),{headers:authHeader()})\r\n}\r\n\r\nfunction sendGetRequest(obj, myUrl) {\r\n    return axios.get(baseUrl + myUrl,{headers:authHeader(), params:obj})\r\n}\r\n\r\nfunction logout() {\r\n    localStorage.removeItem('currentUser');\r\n}\r\n// changee\r\n\r\n\r\n\r\n","export const SIGN_UP='SIGN_UP';","import React, { Component } from 'react';\r\nimport { ReCaptcha } from 'react-recaptcha-google'\r\n\r\nclass Captcha extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.onLoadRecaptcha = this.onLoadRecaptcha.bind(this);\r\n        this.verifyCallback = this.verifyCallback.bind(this);\r\n        this.state = { isVerified: false};\r\n      }\r\n\r\n      componentDidMount() {\r\n        if (this.captchaDemo) {\r\n            console.log(\"started, just a second...\")\r\n            this.captchaDemo.reset();\r\n        }\r\n      }\r\n      onLoadRecaptcha() {\r\n          if (this.captchaDemo) {\r\n              this.captchaDemo.reset();\r\n          }\r\n      }\r\n      verifyCallback(recaptchaToken) {\r\n        // Here you will get the final recaptchaToken!!!  \r\n        if(recaptchaToken){\r\n         this.setState({isVerified:true});\r\n         this.props.verifiedCaptcha(this.state.isVerified);\r\n        }\r\n      }\r\n      render() {\r\n        return (\r\n          <div>\r\n            {/* You can replace captchaDemo with any ref word */}\r\n            <ReCaptcha\r\n                ref={(el) => {this.captchaDemo = el;}}\r\n                size=\"normal\"\r\n                data-theme=\"dark\"            \r\n                render=\"explicit\"\r\n                sitekey=\"6LexwvUZAAAAADbfjgviQwmel_FTXu76rRDE8sx_\"\r\n                onloadCallback={this.onLoadRecaptcha}\r\n                verifyCallback={this.verifyCallback}\r\n            />\r\n           \r\n          </div>\r\n        );\r\n      };\r\n};\r\nexport default Captcha;","import React, { useState, useEffect } from \"react\";\r\nimport useForm from \"../useForm\";\r\nimport { service } from \"../helpers/Service\";\r\nimport { Redirect } from 'react-router';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport { loadReCaptcha } from 'react-recaptcha-google'\r\nimport * as action from \"../signUp/signUpAction\";\r\nimport Recaptcha from 'react-recaptcha'\r\nimport Captcha from \"./Captcha\";\r\n\r\nconst initialFieldValues = {\r\n    MobileNo: '0715701413',\r\n    DOB: '1994-06-30',\r\n    PIN: 'a',\r\n    verified: false\r\n\r\n}\r\nfunction SignUp(props) {\r\n\r\n    let history = useHistory();\r\n    const [error, setError] = useState('')\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        doHandleSubmit();\r\n    }\r\n    const doHandleSubmit = () => {\r\n        props.signupUser(initialFieldValues);\r\n        localStorage.setItem(\"mobile_no\", values.MobileNo)\r\n        values.action = props.action;\r\n        if (validate()) {\r\n            service.sendGetRequest(values, 'WebSignup/SignUp')\r\n                .then(\r\n                    response => signUpSuccess(response),\r\n                    error => {\r\n                    }\r\n                );\r\n        }\r\n    }\r\n    const signUpSuccess = (result) => {\r\n\r\n        if (result.data[0].Code == -1) {\r\n            setError(result.data[0].Msg);\r\n        }\r\n        else {\r\n            history.push('/otp-verification');\r\n        }\r\n    }\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = {}\r\n        if ('MobileNo' in fieldValues)\r\n            temp.MobileNo = fieldValues.MobileNo ? \"\" : \"Mobile is required.\"\r\n        if ('DOB' in fieldValues)\r\n            temp.DOB = fieldValues.DOB ? \"\" : \"Dob is required.\"\r\n        if ('PIN' in fieldValues)\r\n            temp.PIN = fieldValues.PIN ? \"\" : \"Pin Code is required.\"\r\n        if (!fieldValues.verified) {\r\n            temp.verified = fieldValues.verified ? \"\" : \"Please verified that your are human.\"\r\n        }\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n    } = useForm(initialFieldValues, validate)\r\n\r\n    const showValidateMsg = (field) => {\r\n        if (errors[field]) {\r\n            return <small className=\"form-text text-muted\">{errors[field]}</small>\r\n        }\r\n    }\r\n    const DoVerifiedCaptcha = (isVerified) => {\r\n        values.verified = isVerified;\r\n        doHandleSubmit();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"col-md-6\">\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Mobile No</label>\r\n                        <input type=\"text\"\r\n                            name=\"MobileNo\"\r\n                            value={values.MobileNo}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('MobileNo')}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">DateOfBirth</label>\r\n                        <input type=\"date\"\r\n                            name=\"DOB\"\r\n                            onChange={handleInputChange}\r\n                            value={values.DOB}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('DOB')}\r\n\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputPassword1\">Pin code</label>\r\n                        <input type=\"password\"\r\n                            name=\"PIN\"\r\n                            value={values.PIN}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('PIN')}\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    <br />\r\n                    <br />\r\n                    <Captcha verifiedCaptcha={DoVerifiedCaptcha} />\r\n\r\n                </form>\r\n                {error && <span >{error}</span>}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    mobileNo: state.signup.MobileNo\r\n})\r\n\r\nconst mapActionToProps = dispatch => {\r\n    return {\r\n        signupUser: (initialFieldValues) => dispatch(action.signupUser(initialFieldValues))\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(SignUp);","import {SIGN_UP} from './signUpType';\r\n\r\nexport const signupUser=(data)=>{\r\n    return {\r\n        type:SIGN_UP,\r\n        payload:data\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { service } from '../helpers/Service';\r\nimport useForm from \"../useForm\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst initialFieldValues = {\r\n    OTP: '',\r\n}\r\nexport default function OTPVerification() {\r\n    let history = useHistory();\r\n\r\n    const [isResentOTP, setResentOTP] = useState(false)\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            service.sendGetRequest({ mobileNo: localStorage.getItem(\"mobile_no\"), applicationId: '2', otpNo: values.OTP }, 'WebSignup/SubmitOTPSignUp')\r\n                .then((response) => { submitOTPSuccess(response) })\r\n                .catch((error) => { submitOTPErrorHandling(error.response) });\r\n        }\r\n    }\r\n\r\n    const submitOTPSuccess = (result) => {\r\n        if (result) {\r\n            history.push('/password');\r\n        }\r\n    }\r\n    const submitOTPErrorHandling = (error) => {\r\n        if (error) {\r\n            if(error.data.code==-2){\r\n                history.push('/signIn');\r\n            }\r\n            else    \r\n            {\r\n                error.error = error.data.message;\r\n                setErrors({ ...error })\r\n            }\r\n          \r\n        }\r\n    }\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = {};\r\n        if ('OTP' in fieldValues) {\r\n            temp.OTP = fieldValues.OTP ? \"\" : \"OTP is required.\"\r\n            temp.OTP = (fieldValues.OTP && isNaN(fieldValues.OTP))?'Please enter correct format':''\r\n        }\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const showValidateMsg = (field) => {\r\n        if (errors[field]) {\r\n            return <small className=\"form-text text-muted\">{errors[field]}</small>\r\n        }\r\n    }\r\n    const {\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        setValues,\r\n        handleInputChange,\r\n        clearData\r\n    } = useForm(initialFieldValues, validate);\r\n\r\n    const resendOTP = () => {\r\n        clearData();\r\n        return service.sendGetRequest({ mobileNo: localStorage.getItem(\"mobile_no\"), applicationId: '2' }, 'WebSignup/ReSendOTP')\r\n            .then((response) => { resendOTPSuccess(response) })\r\n\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    const resendOTPSuccess = (result) => {\r\n        if (result) {\r\n            setResentOTP(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"col-md-6\">\r\n                <h3>OTP Verification page</h3>\r\n\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">OTP</label>\r\n                        <input type=\"text\"\r\n                            name=\"OTP\"\r\n                            value={values.OTP}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('OTP')}\r\n                    </div>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => setResentOTP(true)}>Resend OTP</button>\r\n                    <button type=\"submit\" className=\"btn btn-primary ml-4\">Continue</button>\r\n                </form>\r\n                {errors.error && <span >{errors.error}</span>}\r\n            </div>\r\n\r\n\r\n            {isResentOTP && <div>\r\n                Do you have mobile no with you?\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={resendOTP}>Yes</button>\r\n                <button type=\"button\" className=\"btn btn-primary ml-4\" onClick={() => history.push('/')}>No</button>\r\n            </div>}\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { service } from '../helpers/Service';\r\nimport useForm from \"../useForm\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst initialFieldValues = {\r\n    Password: '',\r\n    ConfirmPassword: '',\r\n}\r\n\r\nexport default function PasswordEnteringScreen() {\r\n    let history = useHistory();\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            values.MobileNo=localStorage.getItem(\"mobile_no\");\r\n            service.sendPostRequest(values, 'WebSignup/SetPasswordForWebSignIn')\r\n                .then((response) => { setPasswordSuccess(response) })\r\n                .catch((error) => { setPasswordErrorHandling(error.response) });\r\n        }\r\n    }\r\n    const setPasswordSuccess = (result) => {\r\n        if(result){\r\n            localStorage.setItem('currentUser', JSON.stringify(result.data));\r\n            history.push('/home');\r\n        }\r\n    }\r\n    const setPasswordErrorHandling = (error) => {\r\n        if (error) {\r\n            error.error = error.data.message;\r\n            setErrors({ ...error })\r\n        }\r\n    }\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = {}\r\n        if ('Password' in fieldValues) {\r\n            temp.Password = fieldValues.Password ? \"\" : \"Password is required.\"\r\n        }\r\n        if ('ConfirmPassword' in fieldValues) {\r\n            temp.ConfirmPassword = fieldValues.ConfirmPassword ? \"\" : \"Confirm Password is required.\"\r\n        }\r\n        if (fieldValues.ConfirmPassword && fieldValues.Password) {\r\n            temp.ComparePasswordValidator = fieldValues.Password == fieldValues.ConfirmPassword ? '' : \"Password does not not match with the above one\";\r\n        }\r\n        if (fieldValues.Password && !(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{6,15}$/.test(fieldValues.Password))) {\r\n            temp.Password = \"Min 6 characters including at least on capital letter,number and  special character ,max length 15.\";\r\n        }\r\n        if (fieldValues.ConfirmPassword && !(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{6,15}$/.test(fieldValues.ConfirmPassword))) {\r\n            temp.ConfirmPassword = \"Min 6 characters including at least on capital letter,number and  special character ,max length 15.\";\r\n        }\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const showValidateMsg = (field) => {\r\n        if (errors[field]) {\r\n            return <small className=\"form-text text-muted\">{errors[field]}</small>\r\n        }\r\n    }\r\n    const {\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        setValues,\r\n        handleInputChange,\r\n    } = useForm(initialFieldValues, validate);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"col-md-6\">\r\n                <h3>Password Entering Screen</h3>\r\n\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Password</label>\r\n                        <input type=\"password\"\r\n                            name=\"Password\"\r\n                            value={values.Password}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('Password')}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Confirm Password</label>\r\n                        <input type=\"password\"\r\n                            name=\"ConfirmPassword\"\r\n                            value={values.ConfirmPassword}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('ConfirmPassword')}\r\n                        {showValidateMsg('ComparePasswordValidator')}\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary ml-4\" >Continue</button>\r\n                </form>\r\n                {errors.error && <span >{errors.error}</span>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import {SIGN_UP} from './signUpType';\r\nconst initialValues={\r\n    MobileNo:'0715701413',\r\n}\r\n\r\nconst signUpReducer=(state=initialValues,action)=>{\r\n    switch(action.type){\r\n        case SIGN_UP:return{\r\n            ...state,\r\n            MobileNo:action.payload\r\n        }\r\n        default:return state;\r\n    }\r\n\r\n}\r\nexport default signUpReducer","import { combineReducers} from  'redux'\r\nimport signupReducer from './signUpReducer'\r\n\r\nconst rootReducer=combineReducers({\r\n    signup:signupReducer\r\n})\r\n\r\nexport default rootReducer","import {createStore} from 'redux'\r\nimport rootReducer from './rootReducer'\r\n\r\n\r\nconst store=createStore(rootReducer)\r\nexport default store","const TOKEN_KEY = 'currentUser';\r\n\r\nexport const login = () => {\r\n    localStorage.setItem(TOKEN_KEY, 'TestLogin');\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n}\r\n\r\nexport const isLogin = () => {\r\n    if (localStorage.getItem(TOKEN_KEY)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport useForm from \"../useForm\";\r\nimport { service } from \"../helpers/Service\";\r\nimport { Redirect } from 'react-router';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { isLogin } from \"../helpers/IsUserLogged\";\r\n\r\nconst initialFieldValues = {\r\n    MobileNo: '0715701413',\r\n    DOB: '1994-06-30',\r\n    Password: 'a',\r\n\r\n}\r\nexport default function SignIn() {\r\n\r\n    let history = useHistory();\r\n    // useEffect(() => {\r\n    //     if (isLogin) {\r\n    //         history.push('/home');\r\n    //     }\r\n\r\n    // });\r\n\r\n    const handleSubmit = e => {\r\n        debugger\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            service.sendPostRequest(values, 'WebSignup/SignIn')\r\n                .then((response) => { signInSuccess(response) })\r\n                .catch((error) => { signInSuccessErrorHandling(error.response) });\r\n        }\r\n\r\n\r\n    }\r\n    const signInSuccess = (result) => {\r\n        if (result != null) {\r\n            localStorage.setItem('currentUser', JSON.stringify(result.data));\r\n            history.push('/home');\r\n        }\r\n    }\r\n    const signInSuccessErrorHandling = (error) => {\r\n        if (error) {\r\n            error.error = error.data[0].Msg;\r\n            setErrors(error)\r\n        }\r\n    }\r\n    const signInAsDifferent = () => {\r\n        history.push('/');\r\n    }\r\n    const validate = (fieldValues = values) => {\r\n        let temp = {}\r\n        if ('MobileNo' in fieldValues)\r\n            temp.MobileNo = fieldValues.MobileNo ? \"\" : \"Mobile is required.\"\r\n        if ('DOB' in fieldValues)\r\n            temp.DOB = fieldValues.DOB ? \"\" : \"Dob is required.\"\r\n        if ('Password' in fieldValues)\r\n            temp.Password = fieldValues.Password ? \"\" : \"Password  is required.\"\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n    } = useForm(initialFieldValues, validate)\r\n\r\n    const showValidateMsg = (field) => {\r\n        if (errors[field]) {\r\n            return <small className=\"form-text text-muted\">{errors[field]}</small>\r\n        }\r\n    }\r\n    const forgotPassword = () => {\r\n        history.push('/reset-password');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"col-md-6\">\r\n                <h3>Sign In</h3>\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Mobile No</label>\r\n                        <input type=\"text\"\r\n                            name=\"MobileNo\"\r\n                            value={values.MobileNo}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('MobileNo')}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">DateOfBirth</label>\r\n                        <input type=\"date\"\r\n                            name=\"DOB\"\r\n                            onChange={handleInputChange}\r\n                            value={values.DOB}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('DOB')}\r\n\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                        <input type=\"password\"\r\n                            name=\"Password\"\r\n                            value={values.Password}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('Password')}\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary ml-3\">SignIn</button>\r\n                    <button type=\"button\" className=\"btn btn-primary ml-3\" onClick={forgotPassword}>Forget Password</button>\r\n                    <button type=\"button\" className=\"btn btn-primary ml-3\" onClick={signInAsDifferent}>Sign in as Different user</button>\r\n                </form>\r\n                {errors.error && <span >{errors.error}</span>}\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport { service } from './helpers/Service'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default function Home() {\r\n    let history = useHistory();\r\n\r\n    const logOut = () => {\r\n        service.logout();\r\n        history.push('/signIn');\r\n    }\r\n    const changePassword = () => {\r\n        history.push('/change-password');\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    Wel Come to Home\r\n            <input type=\"button\" className=\"btn btn-primary\" onClick={logOut} value=\"Sign out\" />\r\n                    <input type=\"button\" className=\"btn btn-primary ml-3\" onClick={changePassword} value=\"Change password\" />\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function UnAuthorized() {\r\n    return (\r\n        <div>\r\n            UnAuthorized\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router';\r\nimport { Route } from 'react-router-dom';\r\nimport { isLogin } from '../helpers/IsUserLogged';\r\nimport { isAllowed } from './UserRight';\r\n\r\n\r\nconst PrivateRoute = ({ component: Component, permission, ...rest }) => {\r\n    // return (\r\n    //     <Route {...rest} render={props =>\r\n    //         (\r\n    //             isLogin() ?\r\n    //                 (isAllowed(permission) ? <Component {...props} /> : <Redirect to=\"/UnAuthorized\" />)\r\n    //                 : <Redirect to=\"/\" />\r\n    //         )} />\r\n\r\n    // );\r\n    debugger\r\n    return (\r\n        <Route {...rest} render={props =>\r\n            (\r\n                isLogin() ?\r\n                    <Component {...props} />\r\n                    : <Redirect to=\"/signIn\" />\r\n            )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute\r\n","import React from 'react'\r\nimport SignUp from './SignUp'\r\n\r\nexport default function ResetPassword() {\r\n    return (\r\n\r\n        <>\r\n            <h3>Reset Password</h3>\r\n            <SignUp action=\"ResetPassword\"/>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { service } from '../helpers/Service';\r\nimport useForm from \"../useForm\";\r\nimport { useHistory } from 'react-router-dom';\r\nconst initialFieldValues = {\r\n    ExistPassword: 'a',\r\n    Password:'123@cmbA',\r\n    ConfirmPassword: '123@cmbA',\r\n}\r\n\r\n\r\nexport default function ChangePassword() {\r\n    let history = useHistory();\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            service.sendGetRequest(values, 'WebSignup/ChangePassword')\r\n                .then((response) => { setPasswordSuccess(response) })\r\n                .catch((error) => { setPasswordErrorHandling(error.response) });\r\n        }\r\n    }\r\n    const setPasswordSuccess = (result) => {\r\n        if(result){\r\n            history.push('/profile');\r\n        }\r\n    }\r\n    const setPasswordErrorHandling = (error) => {\r\n        if (error) {\r\n            error.error = error.data.Message;\r\n            setErrors({ ...error })\r\n        }\r\n    }\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = {}\r\n        if ('ExistPassword' in fieldValues) {\r\n            temp.ExistPassword = fieldValues.ExistPassword ? \"\" : \"Existing Password  is required.\"\r\n        }\r\n        if ('Password' in fieldValues) {\r\n            temp.Password = fieldValues.Password ? \"\" : \"Password is required.\"\r\n        }\r\n        if ('ConfirmPassword' in fieldValues) {\r\n            temp.ConfirmPassword = fieldValues.ConfirmPassword ? \"\" : \"Confirm Password is required.\"\r\n        }\r\n        if (fieldValues.ConfirmPassword && fieldValues.Password) {\r\n            temp.ComparePasswordValidator = fieldValues.Password == fieldValues.ConfirmPassword ? '' : \"Password does not not match with the above one\";\r\n        }\r\n        if (fieldValues.Password && !(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{6,15}$/.test(fieldValues.Password))) {\r\n            temp.Password = \"Min 6 characters including at least on capital letter,number and  special character ,max length 15.\";\r\n        }\r\n        if (fieldValues.ConfirmPassword && !(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{6,15}$/.test(fieldValues.ConfirmPassword))) {\r\n            temp.ConfirmPassword = \"Min 6 characters including at least on capital letter,number and  special character ,max length 15.\";\r\n        }\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const showValidateMsg = (field) => {\r\n        if (errors[field]) {\r\n            return <small className=\"form-text text-muted\">{errors[field]}</small>\r\n        }\r\n    }\r\n    const {\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        setValues,\r\n        handleInputChange,\r\n    } = useForm(initialFieldValues, validate);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"col-md-6\">\r\n                <h3>Change Password Screen</h3>\r\n\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Existing Password</label>\r\n                        <input type=\"password\"\r\n                            name=\"ExistPassword\"\r\n                            value={values.ExistPassword}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('ExistPassword')}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Password</label>\r\n                        <input type=\"password\"\r\n                            name=\"Password\"\r\n                            value={values.Password}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('Password')}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Confirm Password</label>\r\n                        <input type=\"password\"\r\n                            name=\"ConfirmPassword\"\r\n                            value={values.ConfirmPassword}\r\n                            onChange={handleInputChange}\r\n                            className=\"form-control\"\r\n                        />\r\n                        {showValidateMsg('ConfirmPassword')}\r\n                        {showValidateMsg('ComparePasswordValidator')}\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary ml-4\" >Continue</button>\r\n                </form>\r\n                {errors.error && <span >{errors.error}</span>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Profile() {\r\n    return (\r\n        <div>\r\n            Profile\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SignUp from '../login/SignUp'\r\n\r\nexport default function DefaultPage() {\r\n    return (\r\n        <div>\r\n            <h1>Sign Up</h1>\r\n            <SignUp action=\"SignUp\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport XLSX from 'xlsx';\r\nimport Button from 'devextreme-react/button';\r\nimport fileSaver from 'file-saver';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik';\r\n\r\nimport * as Yup from 'yup';\r\n\r\nimport { Modal } from 'react-bootstrap'\r\nimport DataGrid, {\r\n    Editing, Lookup,\r\n    Column, Paging,\r\n    SearchPanel,\r\n    ColumnChooser,\r\n    GroupPanel,\r\n    Export,\r\n    LoadPanel,\r\n    Selection,\r\n    FilterRow,\r\n    RequiredRule,\r\n    EmailRule\r\n} from 'devextreme-react/data-grid';\r\nimport { service } from \"../helpers/Service\";\r\n\r\nlet selectedFile;\r\ntoast.configure();\r\nconst initialHeaderValues={\r\n    instituteId:'',\r\n    category1Id:'',\r\n    category2Id:'',\r\n    category3Id:'',\r\n}\r\n\r\nconst initialValues = {\r\n    Id: '',\r\n    IndexNo: '',\r\n    FirstName: '',\r\n    LastName: '',\r\n    FullName: '',\r\n    PermanentAddress: '',\r\n    ResidenceAddress: '',\r\n    Class: '',\r\n    CallingName: '',\r\n    Email: '',\r\n    Telephone: '',\r\n    ParentCategory1: '',\r\n    ParentCategory1ContactNo: '',\r\n    ParentCategory2: '',\r\n    ParentCategory2ContactNo: '',\r\n    ParentCategory3: '',\r\n    ParentCategory3ContactNo: ''\r\n}\r\nexport default function Student() {\r\n    const inputEl = useRef(null);\r\n    const [students, setStudents] = useState([]);\r\n    const [student, setStudent] = useState(initialValues);\r\n\r\n    const [categories1, setCategories1] = useState([]);\r\n    const [categories2, setCategories2] = useState([]);\r\n    const [categories3, setCategories3] = useState([]);\r\n    const [institutes, setInstitutes] = useState([]);\r\n\r\n    const [headerValues, setInitialHeaderValues] = useState(initialHeaderValues);\r\n\r\n    const [category3Txt, setCategory3Txt] = useState('');\r\n\r\n    const [categoryErrors, setCategoryErrors] = useState({});\r\n\r\n\r\n\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n        getInstitutes();\r\n    }, []);\r\n\r\n    const doUpload = (event) => {\r\n        selectedFile = event.target.files[0];\r\n    }\r\n\r\n\r\n    let data = [{\r\n        \"name\": \"jayanth\",\r\n        \"data\": \"scd\",\r\n        \"abc\": \"sdef\"\r\n    }]\r\n\r\n    const downloadTxtFile = () => {\r\n        const downloadUrl = 'http://testsorageweb.somee.com/Myfile/student_list_temp.xlsx';\r\n        // const downloadUrl = 'https://localhost:44369/Myfile/student_list_temp.xlsx';\r\n        fileSaver.saveAs(downloadUrl, 'student_list_template');\r\n\r\n    }\r\n    const convertExcelToData = () => {\r\n        if (validateCategory()) {\r\n            doConvertExcelToData();\r\n        }\r\n    }\r\n\r\n    const validateCategory = () => {\r\n        debugger\r\n        let temp = {};\r\n        let valid = true;\r\n        if (headerValues.instituteId == '') {\r\n            temp.institute = 'Institute must be selected.'\r\n            valid = false;\r\n        }\r\n        if (headerValues.category1Id == '') {\r\n            temp.category1 = 'Category 1 must be selected.'\r\n            valid = false;\r\n        }\r\n        if (headerValues.category2Id  == '') {\r\n            temp.category2 = 'Category 2 must be selected.';\r\n            valid = false;\r\n\r\n        }\r\n        if (headerValues.category3Id  == '') {\r\n            temp.category3 = 'Category 3 must be selected.';\r\n            valid = false;\r\n\r\n        }\r\n        setCategoryErrors({\r\n            ...temp\r\n        })\r\n        return valid;\r\n\r\n    }\r\n    const showCategoryValidateMsg = (field) => {\r\n        if (categoryErrors[field]) {\r\n            return <small className=\"form-text text-muted\">{categoryErrors[field]}</small>\r\n        }\r\n    }\r\n    const doConvertExcelToData = () => {\r\n        XLSX.utils.json_to_sheet(data, 'out.xlsx');\r\n        if (selectedFile) {\r\n            let fileReader = new FileReader();\r\n            fileReader.readAsBinaryString(selectedFile);\r\n            fileReader.onload = (event) => {\r\n                let data = event.target.result;\r\n                let workbook = XLSX.read(data, { type: \"binary\" });\r\n                console.log(workbook);\r\n                workbook.SheetNames.forEach(sheet => {\r\n                    setStudents([]);\r\n                    let rowObject = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheet]);\r\n                    var students = convertToOriginalObj(rowObject);\r\n                    var duplicateIndexes = findDuplicates(students.map(x => x.IndexNo));\r\n                    if (duplicateIndexes.length > 0) {\r\n                        toast.warning('Index no can not be duplicated ' +duplicateIndexes.join(','));\r\n                        return\r\n                    }\r\n                    else {\r\n                        setStudents(students);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        inputEl.current.value = '';\r\n    }\r\n    const getStudentByCategories = (category1, category2, category3) => {\r\n        // if (defaultStudentsList.length > 0) {\r\n        //     var students = defaultStudentsList;\r\n\r\n        //     if (category1 != '') {\r\n        //         students = defaultStudentsList.filter(x => x.ParentCategory1 == category1);\r\n\r\n        //     }\r\n        //     if (category2 != '') {\r\n        //         students = defaultStudentsList.filter(x => x.ParentCategory2 == category2);\r\n        //     }\r\n        //     if (category3 != '') {\r\n        //         students = defaultStudentsList.filter(x => x.ParentCategory1 == category3);\r\n        //     }\r\n\r\n        // }\r\n        // setStudents(students);\r\n    }\r\n    const convertToOriginalObj = (data) => {\r\n        var studentArray = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            var obj = {};\r\n            obj.Id = i;\r\n            obj.IndexNo = data[i]['Index No'];\r\n            obj.FirstName = data[i]['First Name'];\r\n            obj.LastName = data[i]['Last Name'];\r\n            obj.FullName = data[i]['Full Name'];\r\n            obj.PermanentAddress = data[i]['Permanent Address'];\r\n            obj.ResidenceAddress = data[i]['Residence Address'];\r\n            obj.Class = category3Txt;\r\n            obj.CallingName = data[i]['Calling Name'];\r\n            obj.Email = data[i]['Email'];\r\n            obj.Telephone = data[i]['Telephone'];\r\n            obj.ParentCategory1 = data[i]['Parent Category 1'];\r\n            obj.ParentCategory1ContactNo = data[i]['Parent Category 1 Contact No'];\r\n            obj.ParentCategory2 = data[i]['Parent Category 2'];\r\n            obj.ParentCategory2ContactNo = data[i]['Parent Category 2 Contact No'];\r\n            obj.ParentCategory3 = data[i]['Parent Category 3'];\r\n            obj.ParentCategory3ContactNo = data[i]['Parent Category 3 Contact No'];\r\n            studentArray.push(obj);\r\n        }\r\n        return studentArray;\r\n\r\n    }\r\n    const createGardianList = (data) => {\r\n        var gardianArray = [];\r\n        var obj = {};\r\n        obj.GardianTypeId = data['ParentCategory1']\r\n        obj.MobileNo = data['ParentCategory1ContactNo']\r\n        gardianArray.push(obj);\r\n        var obj1 = {};\r\n        obj1.GardianTypeId = data['ParentCategory2']\r\n        obj1.MobileNo = data['ParentCategory2ContactNo']\r\n        gardianArray.push(obj1);\r\n        var obj2 = {};\r\n        obj2.GardianTypeId = data['ParentCategory3']\r\n        obj2.MobileNo = data['ParentCategory3ContactNo']\r\n        gardianArray.push(obj2);\r\n        return gardianArray;\r\n\r\n    }\r\n    const getInstitutes = () => {\r\n        service.sendGetRequest({ townId: 1 }, 'Institute/LoadInstitutes')\r\n            .then((response) => { getInstitutesSuccess(response) })\r\n            .catch((error) => { studentSaveFailure(error.response) });\r\n    }\r\n    const getInstitutesSuccess = (result) => {\r\n        if (result) {\r\n            setInstitutes(result.data.town);\r\n        }\r\n    }\r\n    const getCategories = () => {\r\n        service.sendGetRequest({ institueId: 1 }, 'Category/LoadCategory1')\r\n            .then((response) => { getCategory1Success(response) })\r\n            .catch((error) => { studentSaveFailure(error.response) });\r\n    }\r\n    const getCategory1Success = (result) => {\r\n        if (result) {\r\n            setCategories1(result.data.category1);\r\n        }\r\n    }\r\n\r\n    const handleOnChange = (ev) => {\r\n        const { value ,name} = ev.target;\r\n        const fieldValue = { [name]: value }\r\n\r\n        setInitialHeaderValues({\r\n            ...headerValues,\r\n            ...fieldValue\r\n        })\r\n        \r\n        if (name==\"category1Id\" && value != '' ) {\r\n            getCategories2(value);\r\n\r\n        }\r\n        if (name==\"category2Id\" && value != '' ) {\r\n            getCategories3(value);\r\n\r\n        }\r\n        if(name==\"category3Id\" && value != '' )\r\n        {\r\n            let index = ev.nativeEvent.target.selectedIndex;\r\n           setCategory3Txt(ev.nativeEvent.target[index].text);\r\n        }\r\n        // else {\r\n        //     setCategories2([]);\r\n        //     setCategory2('');\r\n        //     setCategory3('');\r\n        //     setCategories3([]);\r\n        // }\r\n\r\n    }\r\n    const getCategories2 = (category1Id) => {\r\n        service.sendGetRequest({ category1Id: category1Id }, 'Category/LoadCategory2')\r\n            .then((response) => { getCategory2Success(response) })\r\n            .catch((error) => { studentSaveFailure(error.response) });\r\n    }\r\n    const getCategory2Success = (result) => {\r\n        if (result) {\r\n            setCategories2(result.data.category2);\r\n        }\r\n    }\r\n   \r\n    const getCategories3 = (category2Id) => {\r\n        service.sendGetRequest({ category2Id: category2Id }, 'Category/LoadCategory3')\r\n            .then((response) => { getCategories3Success(response) })\r\n            .catch((error) => { studentSaveFailure(error.response) });\r\n    }\r\n\r\n    const getCategories3Success = (result) => {\r\n        debugger\r\n        if (result) {\r\n            setCategories3(result.data.category3);\r\n        }\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        var studentObj = creatObject();\r\n        if (studentObj != null && studentObj.length>0) {\r\n            service.sendPostRequest(studentObj, 'Student')\r\n                .then((response) => { studentSaveSuccess(response) })\r\n                .catch((error) => { studentSaveFailure(error.response) });\r\n        }\r\n\r\n    }\r\n    const studentSaveSuccess = (result) => {\r\n        if (result) {\r\n            toast.success(\"Record Saved Successfully\");\r\n            setStudents([]);\r\n        }\r\n    }\r\n    const creatObject = () => {\r\n        var studentArray = [];\r\n        for (let i = 0; i < students.length; i++) {\r\n            var isValid = validation(students[i]);\r\n            if (isValid) {\r\n                var obj = {};\r\n                obj.Id = i;\r\n                obj.IndexNo = students[i]['IndexNo'];\r\n                obj.FirstName = students[i]['FirstName'];\r\n                obj.LastName = students[i]['LastName'];\r\n                obj.InstituteId=Number(headerValues.instituteId);\r\n                obj.FullName = students[i]['FullName'];\r\n                obj.PermanentAddress = students[i]['PermanentAddress'];\r\n                obj.ResidentialAddress = students[i]['ResidenceAddress'];\r\n                obj.Class = students[i]['Class'];\r\n                obj.EnrolledClassId = Number(headerValues.category3Id);\r\n                obj.DisplayName = students[i]['CallingName'];\r\n                obj.Email = students[i]['Email'];\r\n                obj.Telephone = students[i]['Telephone'];\r\n                obj.Gardians = createGardianList(students[i]);\r\n                studentArray.push(obj)\r\n            }\r\n            else {\r\n                return null\r\n            }\r\n\r\n        }\r\n        return studentArray;\r\n    }\r\n\r\n    const findDuplicates = (arr) => {\r\n        let sorted_arr = arr.slice().sort(); // You can define the comparing function here. \r\n        let results = [];\r\n        for (let i = 0; i < sorted_arr.length - 1; i++) {\r\n            if (sorted_arr[i + 1] == sorted_arr[i]) {\r\n                results.push(sorted_arr[i]);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    const validation = (data) => {\r\n        if (data.IndexNo == undefined) {\r\n            toast.warn(\"Index No is required\");\r\n            return false\r\n        }\r\n        if (data.FirstName == undefined) {\r\n            toast.warn(\"First of index \" + data.IndexNo + \"  Name is required\");\r\n            return false\r\n\r\n        }\r\n        if (data.LastName == undefined) {\r\n            toast.warn(\"Last Name of index \" + data.IndexNo + \"  is required\");\r\n            return false\r\n\r\n        }\r\n        if (data.FullName == undefined) {\r\n            toast.warn(\"Full Name of index \" + data.IndexNo + \"  is required\");\r\n            return false\r\n        }\r\n        if (data.PermanentAddress == undefined) {\r\n            toast.warn(\"Permanent Address of index \" + data.IndexNo + \"  is required\");\r\n            return false\r\n        }\r\n        if (data.Class == undefined) {\r\n            toast.warn(\"Class of index \" + data.IndexNo + \"  is required\");\r\n            return false\r\n        }\r\n        if (data.Email == undefined) {\r\n            toast.warn(\"Email of index \" + data.IndexNo + \"  is required\");\r\n            return false\r\n        }\r\n        if (data.Telephone == undefined) {\r\n            toast.warn(\"Telephone of index \" + data.IndexNo + \"  is required\");\r\n            return false\r\n        }\r\n        if (data.ParentCategory1 == undefined) {\r\n            toast.warn(\"Parent Category 1 of index \" + data.IndexNo + \"  is required\");\r\n            return;\r\n        }\r\n        if (data.ParentCategory1ContactNo == undefined) {\r\n            toast.warn(\"Parent Category1 Contact No  of index \" + data.IndexNo + \"  is required\");\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n    const studentSaveFailure = (error) => {\r\n        if (error) {\r\n            toast.warning(error.data.Message)\r\n        }\r\n    }\r\n\r\n    const onSubmit = values => {\r\n        debugger\r\n        var index = students.findIndex(x => x.Id == values.Id); //update item that saved in db\r\n\r\n        if (index > -1) {\r\n            let newStudents = [...students];  //get old values to another list\r\n            newStudents[index] = values;\r\n            setStudents(newStudents)\r\n            setShow(false);\r\n        }\r\n        else {\r\n            setStudents([...students, values]);\r\n            setShow(false);\r\n\r\n        }\r\n\r\n    }\r\n    const validationSchema = Yup.object().shape({\r\n        IndexNo: Yup.string().trim()\r\n            .required('Index no  is required.'),\r\n        FirstName: Yup.string().trim()\r\n            .required('First Name is required.'),\r\n        LastName: Yup.string().trim()\r\n            .required('Last Name is required.'),\r\n        FullName: Yup.string().trim()\r\n            .required('Full Name is required.'),\r\n        PermanentAddress: Yup.string().trim()\r\n            .required('Permanent Address  is required.'),\r\n        Email: Yup.string().trim()\r\n            .required('Email is required.').\r\n            email('Email is invalid'),\r\n        Class: Yup.string().trim()\r\n            .required('Class is required.'),\r\n        CallingName: Yup.string().trim()\r\n            .required('Calling Name is required.'),\r\n        Telephone: Yup.string().trim()\r\n            .required('Telephone is required.')\r\n            .test('alphabets', 'Contact number is invalid', (value) => {\r\n                if (value == undefined) return true;\r\n                return value = !undefined && /^\\d{3}-?\\d{3}-?\\d{4}$/.test(value);\r\n            }),\r\n        ParentCategory1: Yup.string().trim()\r\n            .required('Parent Category 1 is required.'),\r\n        ParentCategory1ContactNo: Yup.string().trim()\r\n            .required('Parent Category 1 ContactNo  is required.'),\r\n\r\n    });\r\n\r\n\r\n    const onToolbarPreparing = (e) => {\r\n        e.toolbarOptions.items.unshift(\r\n            {\r\n                location: 'after',\r\n                widget: 'dxButton',\r\n                options: {\r\n                    icon: 'plus',\r\n                    text: \"Add New\",\r\n                    type: \"success\",\r\n                    onClick: addClick.bind(this)\r\n                }\r\n            });\r\n\r\n    }\r\n    const addClick = () => {\r\n        debugger\r\n        setShow(true);\r\n        initialValues.Class=category3Txt;\r\n        setStudent({...initialValues});\r\n    }\r\n    const cellRender = (data) => {\r\n        return <div>\r\n            <a onClick={() => update(data.key)} style={{ 'color': 'blue' }}><u>{data.key.IndexNo}</u></a></div>\r\n    }\r\n    const update = (data) => {\r\n        setShow(true);\r\n        setStudent(data);\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <Modal show={show} onHide={handleClose} animation={true} size=\"lg\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Student</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Formik initialValues={student}\r\n                        enableReinitialize={true}\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={onSubmit} >\r\n                        {({ errors, status, touched, handleChange, values, setFieldValue, setFieldTouched, isSubmitting, resetForm }) => (\r\n                            <Form>\r\n                                <div class=\"form-row\">\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputEmail4\">Index No</label>\r\n                                        <Field name=\"IndexNo\" className=\"form-control\" maxLength=\"50\" />\r\n                                        <ErrorMessage name=\"IndexNo\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputEmail4\">First Name</label>\r\n                                        <Field name=\"FirstName\" className=\"form-control\" maxLength=\"50\" />\r\n                                        <ErrorMessage name=\"FirstName\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputPassword4\">Last Name</label>\r\n                                        <Field name=\"LastName\" className=\"form-control\" maxLength=\"50\" />\r\n                                        <ErrorMessage name=\"LastName\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputAddress\">Full Name</label>\r\n                                    <Field name=\"FullName\" className=\"form-control\" />\r\n                                    <ErrorMessage name=\"FullName\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputAddress2\">Permanent Address</label>\r\n                                    <Field name=\"PermanentAddress\" className=\"form-control\" as=\"textarea\" />\r\n                                    <ErrorMessage name=\"PermanentAddress\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputAddress2\">Residence Address</label>\r\n                                    <Field name=\"ResidenceAddress\" className=\"form-control\" as=\"textarea\" />\r\n                                    <ErrorMessage name=\">ResidenceAddress\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Class</label>\r\n                                        <Field name=\"Class\" className=\"form-control\" disabled/>\r\n                                        <ErrorMessage name=\"Class\" component=\"div\" className=\"invalid-feedback d-block\"  />\r\n                                    </div>\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Calling Name</label>\r\n                                        <Field name=\"CallingName\" className=\"form-control\" maxLength=\"150\" />\r\n                                        <ErrorMessage name=\"CallingName\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Telephone</label>\r\n                                        <Field name=\"Telephone\" className=\"form-control\" maxLength=\"50\" />\r\n                                        <ErrorMessage name=\"Telephone\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Email</label>\r\n                                        <Field name=\"Email\" className=\"form-control\" maxLength=\"150\" />\r\n                                        <ErrorMessage name=\"Email\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Parent Category 1</label>\r\n                                        <Field name=\"ParentCategory1\" className=\"form-control\" />\r\n                                        <ErrorMessage name=\"ParentCategory1\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Parent Category1 Contact No</label>\r\n                                        <Field name=\"ParentCategory1ContactNo\" className=\"form-control\" />\r\n                                        <ErrorMessage name=\"ParentCategory1ContactNo\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Parent Category 2</label>\r\n                                        <Field name=\"ParentCategory2\" className=\"form-control\" />\r\n                                        <ErrorMessage name=\"ParentCategory2\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\"> Parent Category 2 Contact No</label>\r\n                                        <Field name=\"ParentCategory2ContactNo\" className=\"form-control\" />\r\n                                        <ErrorMessage name=\"ParentCategory2ContactNo\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\">Parent Category 3</label>\r\n                                        <Field name=\"ParentCategory3\" className=\"form-control\" />\r\n                                        <ErrorMessage name=\"ParentCategory3\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                    <div class=\"form-group col-md-6\">\r\n                                        <label for=\"inputAddress\"> Parent Category 3 Contact No</label>\r\n                                        <Field name=\"ParentCategory3ContactNo\" className=\"form-control\" />\r\n                                        <ErrorMessage name=\"ParentCategory3ContactNo\" component=\"div\" className=\"invalid-feedback d-block\" />\r\n                                    </div>\r\n                                </div>\r\n                                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Modal.Body>\r\n            </Modal>\r\n            <div className=\"container\">\r\n                <br />\r\n                <div class=\"col-md-12\">\r\n\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group col-md-3\">\r\n                            <label for=\"inputEmail4\">Institute</label>\r\n                            <select className=\"form-control\" name=\"instituteId\" onChange={handleOnChange}>\r\n                            <option value=''>Select</option>\r\n                            {institutes.map((v) => (\r\n                                <option value={v.InstituteId}  >{v.InsName}</option>// value coming from prop\r\n                            ))}\r\n                        </select>\r\n                        {showCategoryValidateMsg('institute')}\r\n                        </div>\r\n\r\n                        <div class=\"form-group col-md-3\">\r\n                            <label for=\"inputEmail4\">Category 1</label>\r\n                            <select className=\"form-control\" onChange={handleOnChange} name=\"category1Id\">\r\n                            <option value=''>Select</option>\r\n                            {categories1.map((v) => (\r\n                                <option value={v.Category1id}  >{v.Category1Name}</option>// value coming from prop\r\n                            ))}\r\n                        </select>\r\n                        {showCategoryValidateMsg('category1')}\r\n                        </div>\r\n                        <div class=\"form-group col-md-3\">\r\n                            <label for=\"inputPassword4\">Category 2</label>\r\n                            <select className=\"form-control\" onChange={handleOnChange} name=\"category2Id\">\r\n                            <option value=''>Select</option>\r\n                            {categories2.map((v) => (\r\n                                <option value={v.Category2id}  >{v.Category2Name}</option>// value coming from prop\r\n                            ))}\r\n                        </select>\r\n                        {showCategoryValidateMsg('category2')}\r\n                        </div>\r\n                        <div class=\"form-group col-md-3\">\r\n                            <label for=\"inputPassword4\">Category 3</label>\r\n                            <select className=\"form-control\" onChange={handleOnChange} name=\"category3Id\">\r\n                            <option value=''>Select</option>\r\n                            {categories3.map((v) => (\r\n                                <option value={v.Category3id}  >{v.Category3Name}</option>// value coming from prop\r\n                            ))}\r\n                        </select>\r\n                        {showCategoryValidateMsg('category3')}\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group col-md-3\">\r\n                            <button class=\"btn btn-primary\" onClick={downloadTxtFile}>Download Template</button>\r\n\r\n                        </div>\r\n\r\n                        <div class=\"form-group col-md-3\">\r\n                            <input type=\"file\" id=\"input\" accept=\".xls,.xlsx\" onChange={doUpload} ref={inputEl} />\r\n\r\n                        </div>\r\n                        <div class=\"form-group col-md-3\">\r\n                            <button class=\"btn btn-primary\" id=\"button\" onClick={convertExcelToData}>Upload</button>\r\n\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n                <DataGrid\r\n                    dataSource={students}\r\n                    columnAutoWidth={true}\r\n                    onToolbarPreparing={onToolbarPreparing}\r\n                    allowColumnReordering={true}\r\n                    showBorders={true}\r\n                    allowColumnResizing={true}\r\n                    columnAutoWidth={true}\r\n                >\r\n\r\n                    <Paging enabled={true} />\r\n                    <Export enabled={true} fileName=\"student_list\" />\r\n                    <GroupPanel visible={true} />\r\n                    <Selection mode=\"single\" />\r\n                    <ColumnChooser enabled={true} />\r\n                    <SearchPanel visible={true} />\r\n                    <FilterRow visible={true} />\r\n                    <Paging defaultPageSize={10} />\r\n                    <LoadPanel enabled={true} />\r\n                    <Editing\r\n                        allowDeleting={true}\r\n                        useIcons={true}\r\n                    />\r\n                    <Column dataField=\"IndexNo\" cellRender={cellRender}><RequiredRule /></Column>\r\n                    <Column dataField=\"FirstName\"><RequiredRule /></Column>\r\n                    <Column dataField=\"LastName\" ><RequiredRule /></Column>\r\n                    <Column dataField=\"FullName\" ><RequiredRule /></Column>\r\n                    <Column dataField=\"PermanentAddress\" ><RequiredRule /></Column>\r\n                    <Column dataField=\"ResidenceAddress\" />\r\n                    <Column dataField=\"Class\" ><RequiredRule /></Column>\r\n                    <Column dataField=\"CallingName\"><RequiredRule /></Column>\r\n                    <Column dataField=\"Email\" ><EmailRule /></Column>\r\n                    <Column dataField=\"Telephone\" />\r\n                    <Column dataField=\"ParentCategory1\" ><RequiredRule /></Column>\r\n                    <Column dataField=\"ParentCategory1ContactNo\"><RequiredRule /></Column>\r\n                    <Column dataField=\"ParentCategory2\" />\r\n                    <Column dataField=\"ParentCategory2ContactNo\" />\r\n                    <Column dataField=\"ParentCategory3\" />\r\n                    <Column dataField=\"ParentCategory3ContactNo\" />\r\n\r\n                </DataGrid>\r\n                <br />\r\n                <div class=\"row\">\r\n                    <button class=\"btn btn-primary\" onClick={handleSubmit}>Process</button>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n","import './App.css';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Link, Switch, Route } from 'react-router-dom';\nimport SignUp from './components/login/SignUp'\nimport OTPVerification from './components/login/OTPVerification';\nimport PasswordEnteringScreen from './components/login/PasswordEnteringScreen';\nimport store from './components/signUp/store';\nimport { Provider } from 'react-redux';\nimport SignIn from './components/login/SignIn';\nimport Home from './components/Home';\nimport UnAuthorized from './components/UnAuthorized';\nimport PrivateRoute from './components/route/PrivateRoute';\nimport ResetPassword from './components/login/ResetPassword';\nimport ChangePassword from './components/login/ChangePassword';\nimport Profile from './components/pages/Profile';\nimport DefaultPage from './components/pages/DefaultPage';\nimport student from './components/student/Student';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <Switch>\n          <PrivateRoute  path=\"/home\" component={Home}></PrivateRoute>\n          <Route exact path=\"/\" component={DefaultPage}></Route>\n          <Route path=\"/otp-verification\" component={OTPVerification}></Route>\n          <Route path=\"/password\" component={PasswordEnteringScreen}></Route>\n          <Route path=\"/reset-password\" component={ResetPassword}></Route>\n          <Route path=\"/change-password\" component={ChangePassword}></Route>\n          <Route path=\"/signIn\" component={SignIn}></Route>\n          <Route path=\"/student\" component={student}></Route>\n          <Route path=\"/profile\" component={Profile}></Route>\n          <Route path=\"/unAuthorized\" component={UnAuthorized}></Route>\n        </Switch>\n      </BrowserRouter>\n\n\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './components/signUp/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Provider } from 'react-redux';\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    \n    </Provider>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}